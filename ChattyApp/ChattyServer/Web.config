<?xml version="1.0"?>
<configuration>
  <appSettings>
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
  </appSettings>
  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5"/>
  </system.web>
  <system.serviceModel>
    <bindings>
      <wsHttpBinding>
        <!-- Username binding -->
        <binding name="Binding1">
          <security mode="Message">
            <message clientCredentialType="UserName"/>
          </security>
        </binding>
      </wsHttpBinding>
      <wsDualHttpBinding>
        <!-- Username binding -->
        <binding name="Binding1">
          <security mode="Message">
            <message clientCredentialType="UserName"/>
          </security>
        </binding>
      </wsDualHttpBinding>
    </bindings>

    <services>
      <service behaviorConfiguration="MessageServiceBehavior" name="ChattyServices.MessageService">
        <endpoint address="MessageService.svc" binding="wsHttpBinding" bindingConfiguration="Binding1"
          name="MessageService" contract="ChattyServices.IMessageService" />
      </service>
      <service behaviorConfiguration="MessageServiceBehavior" name="ChattyServices.DuplexMessageService">
        <endpoint address="DuplexMessageService.svc" binding="wsDualHttpBinding" bindingConfiguration="Binding1"
          name="DuplexMessageService" contract="ChattyServices.IDuplexMessageService" />
      </service>
    </services>

    <behaviors>
      <serviceBehaviors>
        <behavior name="MessageServiceBehavior">
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <serviceMetadata httpGetEnabled="true"/>
          <serviceCredentials>
            <!-- 
            The serviceCredentials behavior allows one to specify a custom validator for username/password combinations.				  
            -->
            <userNameAuthentication userNamePasswordValidationMode="Custom" customUserNamePasswordValidatorType="ChattyServices.CustomUserNamePasswordValidator, ChattyServices"/>
            <!-- 
            The serviceCredentials behavior allows one to define a service certificate.
            A service certificate is used by a client to authenticate the service and provide message protection.
            This configuration references the "localhost" certificate installed during the setup instructions.
            -->
            <serviceCertificate findValue="localhost" storeLocation="LocalMachine" storeName="My" x509FindType="FindBySubjectName"/>
          </serviceCredentials>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <protocolMapping>
      <clear/>
      <!--<add binding="wsDualHttpBinding" scheme="http" bindingConfiguration="wsDualHttpBinding" />-->
    </protocolMapping>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true">
      <serviceActivations>
        <add factory="System.ServiceModel.Activation.ServiceHostFactory" relativeAddress="./MessageService.svc" service="ChattyServices.MessageService"/>
        <add factory="System.ServiceModel.Activation.ServiceHostFactory" relativeAddress="./DuplexMessageService.svc" service="ChattyServices.DuplexMessageService"/>
      </serviceActivations>
    </serviceHostingEnvironment>
  </system.serviceModel>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true"/>
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
    <directoryBrowse enabled="true"/>
  </system.webServer>

</configuration>
